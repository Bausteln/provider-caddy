name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  GO_VERSION: '1.23'
  GOLANGCI_VERSION: 'v2.1.2'
  DOCKER_BUILDX_VERSION: 'v0.23.0'

jobs:
  release:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "cachedir=$(make go.cachedir)" >> $GITHUB_ENV

      - name: Cache the Go Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.cachedir }}
          key: ${{ runner.os }}-build-release-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-release-

      - name: Cache Go Dependencies
        uses: actions/cache@v4
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Download Go Modules
        run: make modules.download modules.check

      - name: Build Artifacts
        run: make -j2 build.all
        env:
          BUILD_ARGS: "--load"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to GitHub Container Registry
        env:
          VERSION: ${{ github.ref_name }}
        run: |
          REGISTRY=ghcr.io
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE=${REGISTRY}/${OWNER}/provider-caddy

          # Tag and push architecture-specific images
          docker tag build-$(git rev-parse --short HEAD)/provider-caddy-amd64:latest ${IMAGE}:${VERSION}-amd64
          docker tag build-$(git rev-parse --short HEAD)/provider-caddy-arm64:latest ${IMAGE}:${VERSION}-arm64

          docker push ${IMAGE}:${VERSION}-amd64
          docker push ${IMAGE}:${VERSION}-arm64

          # Create and push multi-arch manifest
          docker manifest create ${IMAGE}:${VERSION} \
            ${IMAGE}:${VERSION}-amd64 \
            ${IMAGE}:${VERSION}-arm64
          docker manifest push ${IMAGE}:${VERSION}

          # Also tag as latest
          docker manifest create ${IMAGE}:latest \
            ${IMAGE}:${VERSION}-amd64 \
            ${IMAGE}:${VERSION}-arm64
          docker manifest push ${IMAGE}:latest

      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION=${{ github.ref_name }}

          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 ${VERSION}^ 2>/dev/null || echo "")

          # Generate changelog
          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since ${PREV_TAG}" > release_notes.md
            echo "" >> release_notes.md
            git log ${PREV_TAG}..${VERSION} --pretty=format:"- %s (%h)" >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "" >> release_notes.md
            echo "First release of provider-caddy" >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo '```yaml' >> release_notes.md
          echo 'apiVersion: pkg.crossplane.io/v1' >> release_notes.md
          echo 'kind: Provider' >> release_notes.md
          echo 'metadata:' >> release_notes.md
          echo '  name: provider-caddy' >> release_notes.md
          echo 'spec:' >> release_notes.md
          echo "  package: ghcr.io/$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')/provider-caddy:${VERSION}" >> release_notes.md
          echo '```' >> release_notes.md

          echo "" >> release_notes.md
          echo "## Container Images" >> release_notes.md
          echo "" >> release_notes.md
          echo "- \`ghcr.io/$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')/provider-caddy:${VERSION}\`" >> release_notes.md
          echo "- \`ghcr.io/$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')/provider-caddy:${VERSION}-amd64\`" >> release_notes.md
          echo "- \`ghcr.io/$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')/provider-caddy:${VERSION}-arm64\`" >> release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          files: |
            _output/xpkg/**/*.xpkg
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
